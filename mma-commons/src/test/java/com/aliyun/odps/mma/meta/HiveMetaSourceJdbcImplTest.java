package com.aliyun.odps.mma.meta;

import static org.junit.Assert.fail;

import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.aliyun.odps.mma.TestUtils;
import com.aliyun.odps.mma.meta.MetaSource.PartitionMetaModel;
import com.aliyun.odps.mma.meta.MetaSource.TableMetaModel;

/**
 * Requirements:
 *   1. SSH tunneling. E.g. ssh -NL 10000:${DESTINATION}:10000 ${USER}@${REMOTE}
 *   2. Data generated by test/setup.py
 */
public class HiveMetaSourceJdbcImplTest {
  private static HiveMetaSourceJdbcImpl metaSource;

  @BeforeClass
  public static void beforeClass() throws ClassNotFoundException, IOException {
    TestUtils.printProperties();
    metaSource = new HiveMetaSourceJdbcImpl(
        TestUtils.getProperty(TestUtils.HIVE_JDBC_URL),
        TestUtils.getProperty(TestUtils.HIVE_JDBC_USERNAME),
        TestUtils.getProperty(TestUtils.HIVE_JDBC_PASSWORD),
        null);
  }

  @Test
  public void testGetTableMeta() {
    try {
      TableMetaModel tableMetaModel = metaSource.getTableMeta(
          "mma_test", "TEST_PARTITIONED_1Kx10K");
      Assert.assertEquals("mma_test", tableMetaModel.getDatabase());
      Assert.assertNotNull(tableMetaModel.getLastModificationTime());
      Assert.assertEquals(16, tableMetaModel.getColumns().size());
      // TODO: assert each column
      Assert.assertEquals(2, tableMetaModel.getPartitionColumns().size());
      // TODO: assert each partition columns
      Assert.assertEquals(1001, tableMetaModel.getPartitions().size());
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }

  @Test
  public void testGetTableMetaWithoutPartitionMeta() {
    try {
      TableMetaModel tableMetaModel = metaSource.getTableMetaWithoutPartitionMeta(
          "mma_test", "TEST_PARTITIONED_1Kx10K");
      Assert.assertNotNull(tableMetaModel.getLastModificationTime());
      Assert.assertEquals(16, tableMetaModel.getColumns().size());
      // TODO: assert each column
      Assert.assertEquals(2, tableMetaModel.getPartitionColumns().size());
      // TODO: assert each partition columns
      Assert.assertEquals(0, tableMetaModel.getPartitions().size());
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }

  @Test
  public void testGetPartitionMeta() {
    try {
      List<String> partitionValues = new ArrayList<>(2);
      partitionValues.add("mma_test");
      partitionValues.add("123456");
      PartitionMetaModel partitionMetaModel = metaSource.getPartitionMeta(
          "mma_test", "TEST_PARTITIONED_1Kx10K", partitionValues);
      Assert.assertEquals(partitionValues, partitionMetaModel.getPartitionValues());
      Assert.assertNotNull(partitionMetaModel.getSize());
      Assert.assertNotNull(partitionMetaModel.getLastModificationTime());
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }

  @Test
  public void testHasDatabase() {
    try {
      Assert.assertTrue(metaSource.hasDatabase("mma_test"));
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }

  @Test
  public void testHasTable() {
    try {
      Assert.assertTrue(metaSource.hasTable(
          "mma_test", "TEST_PARTITIONED_1Kx10K"));
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }

  @Test
  public void testHasPartition() {
    try {
      List<String> partitionValues = new ArrayList<>(2);
      partitionValues.add("mma_test");
      partitionValues.add("123456");
      Assert.assertTrue(metaSource.hasPartition(
          "mma_test", "TEST_PARTITIONED_1Kx10K", partitionValues));
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }

  @Test
  public void testListDatabases() {
    try {
      List<String> databases = new ArrayList<>(2);
      databases.addAll(metaSource.listDatabases());
      databases.forEach(System.out::println);
      Assert.assertTrue(databases.contains("mma_test"));
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }

  @Test
  public void testListTables() {
    try {
      List<String> tables = new LinkedList<>();
      tables.addAll(metaSource.listTables("mma_test"));
      tables.forEach(System.out::println);
      Assert.assertTrue(tables.contains("TEST_PARTITIONED_1Kx10K".toLowerCase()));
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }

  @Test
  public void testListPartitions() {
    try {
      List<List<String>> partitionValuesList = new LinkedList<>();
      partitionValuesList.addAll(metaSource.listPartitions(
          "mma_test", "TEST_PARTITIONED_1Kx10K"));
      Assert.assertEquals(1001, partitionValuesList.size());
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }
}