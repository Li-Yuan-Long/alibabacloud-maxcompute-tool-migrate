/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package com.aliyun.odps.datacarrier.taskscheduler;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class TestMmaConfig {
  private static final Logger LOG = LogManager.getLogger(TestMmaConfig.class);

  // Existing test resources
  private static final Path resourcesDir =  Paths.get("src",
                                                      "test",
                                                      "resources");
  private static final Path odpsConfigPath = Paths.get(resourcesDir.toString(),
                                                       "odps_config.ini");
  private static final Path hiveConfigPath = Paths.get(resourcesDir.toString(),
                                                       "hive_config.ini");
  private static final Path tableMappingPath = Paths.get(resourcesDir.toString(),
                                                         "table_mapping.txt");

  // Files generated by this test
  private static final Path mmaClientConfigPath = Paths.get("mma_client_config.json");
  private static final Path mmaServerConfigPath = Paths.get("mma_server_config.json");
  private static final Path mmaMigrationConfigPath = Paths.get("mma_migration_config.json");

  @BeforeClass
  public static void beforeClass() {
    // Remove previous generated config files
    assert !mmaClientConfigPath.toFile().exists() || mmaClientConfigPath.toFile().delete();
    assert !mmaServerConfigPath.toFile().exists() || mmaServerConfigPath.toFile().delete();
    assert !mmaMigrationConfigPath.toFile().exists() || mmaMigrationConfigPath.toFile().delete();

    // Ensure required test resources exist
    if (!odpsConfigPath.toFile().exists()
        || !hiveConfigPath.toFile().exists()
        || !tableMappingPath.toFile().exists()) {
      throw new IllegalStateException("Test resources for TestMmaConfig not found");
    }
  }

  @AfterClass
  public static void afterClass() {
    // Remove generated config files
    assert !mmaClientConfigPath.toFile().exists() || mmaClientConfigPath.toFile().delete();
    assert !mmaServerConfigPath.toFile().exists() || mmaServerConfigPath.toFile().delete();
    assert !mmaMigrationConfigPath.toFile().exists() || mmaMigrationConfigPath.toFile().delete();
  }

//  @Test (timeout = 5000)
//  public void testGenerateMmaClientConfig() throws IOException {
//    MmaConfigUtils.generateMmaClientConfig(hiveConfigPath, "");
//    MmaClientConfig mmaClientConfig = MmaClientConfig.fromFile(mmaClientConfigPath);
//
//    // Datasource
//    assertEquals(DataSource.Hive, mmaClientConfig.getDataSource());
//
//    // Hive config
//    checkHiveConfig(mmaClientConfig.getHiveConfig());
//
//    // ODPS config and OSS config should be null
//    assertNull(mmaClientConfig.getOdpsConfig());
//    assertNull(mmaClientConfig.getOssConfig());
//  }

  @Test (timeout = 5000)
  public void testGenerateMmaServerConfig() throws IOException {
    MmaConfigUtils.generateMmaServerConfig(hiveConfigPath, odpsConfigPath, "");
    MmaServerConfig.init(mmaServerConfigPath);

    // Datasource
    assertEquals(DataSource.Hive, MmaServerConfig.getInstance().getDataSource());

    // Hive config
    checkHiveConfig(MmaServerConfig.getInstance().getHiveConfig());

    // ODPS config
    checkOdpsConfig(MmaServerConfig.getInstance().getOdpsConfig());

    // OSS config should be null
    assertNull(MmaServerConfig.getInstance().getOssConfig());
  }

  @Test (timeout = 5000)
  public void testGenerateMmaMigrationConfig() throws IOException {
    MmaConfigUtils.generateMmaMigrationConfig(tableMappingPath, "");
    MmaMigrationConfig mmaMigrationConfig = MmaMigrationConfig.fromFile(mmaMigrationConfigPath);

    assertNotNull(mmaMigrationConfig.getTableMigrationConfigs());
    assertEquals(2, mmaMigrationConfig.getTableMigrationConfigs().size());

    MmaConfig.TableMigrationConfig tableMigrationConfig1 =
        mmaMigrationConfig.getTableMigrationConfigs().get(0);
    assertEquals("hive_test_db", tableMigrationConfig1.getSourceDataBaseName());
    assertEquals("hive_test_tbl1" ,tableMigrationConfig1.getSourceTableName());
    assertEquals("mc_test_project", tableMigrationConfig1.getDestProjectName());
    assertEquals("mc_test_table1", tableMigrationConfig1.getDestTableName());
    checkAdditionalTableConfig(tableMigrationConfig1.getAdditionalTableConfig());

    MmaConfig.TableMigrationConfig tableMigrationConfig2 =
        mmaMigrationConfig.getTableMigrationConfigs().get(1);
    assertEquals("hive_test_db", tableMigrationConfig2.getSourceDataBaseName());
    assertEquals("hive_test_tbl2" ,tableMigrationConfig2.getSourceTableName());
    assertEquals("mc_test_project", tableMigrationConfig2.getDestProjectName());
    assertEquals("mc_test_table2", tableMigrationConfig2.getDestTableName());
    checkAdditionalTableConfig(tableMigrationConfig2.getAdditionalTableConfig());
  }

  @Test(timeout = 5000)
  public void testParsingTableMappingSpecifyingPartitions() throws IOException {
    List<String> lines = new LinkedList<>();
    lines.add("source_db.source_tbl(\"ptv1\", \"ptv2\"):dest_db.dest_tbl");
    lines.add("source_db.source_tbl(\"ptv3\", \"ptv4\"):dest_db.dest_tbl");
    List<MmaConfig.TableMigrationConfig> tableMigrationConfigs =
        MmaConfigUtils.parseTableMapping(lines);

    assertEquals(1, tableMigrationConfigs.size());
    MmaConfig.TableMigrationConfig tableMigrationConfig = tableMigrationConfigs.get(0);
    assertEquals("source_db", tableMigrationConfig.getSourceDataBaseName());
    assertEquals("source_tbl", tableMigrationConfig.getSourceTableName());
    assertEquals("dest_db", tableMigrationConfig.getDestProjectName());
    assertEquals("dest_tbl", tableMigrationConfig.getDestTableName());

    List<List<String>> partitionValuesList = tableMigrationConfig.getPartitionValuesList();
    assertEquals(2, partitionValuesList.size());
    assertEquals(2, partitionValuesList.get(0).size());
    assertEquals("ptv1", partitionValuesList.get(0).get(0));
    assertEquals("ptv2", partitionValuesList.get(0).get(1));
    assertEquals(2, partitionValuesList.get(1).size());
    assertEquals("ptv3", partitionValuesList.get(1).get(0));
    assertEquals("ptv4", partitionValuesList.get(1).get(1));
  }

  @Test(timeout = 5000)
  public void testParsingConflictedTableMapping() throws IOException {
    List<String> lines = new LinkedList<>();
    lines.add("source_db.source_tbl(\"ptv1\", \"ptv2\"):dest_db.dest_tbl");
    lines.add("source_db.source_tbl(\"ptv3\", \"ptv4\"):dest_db2.dest_tbl");
    List<MmaConfig.TableMigrationConfig> tableMigrationConfigs =
        MmaConfigUtils.parseTableMapping(lines);

    assertEquals(1, tableMigrationConfigs.size());
    MmaConfig.TableMigrationConfig tableMigrationConfig = tableMigrationConfigs.get(0);
    assertEquals("source_db", tableMigrationConfig.getSourceDataBaseName());
    assertEquals("source_tbl", tableMigrationConfig.getSourceTableName());
    assertEquals("dest_db", tableMigrationConfig.getDestProjectName());
    assertEquals("dest_tbl", tableMigrationConfig.getDestTableName());

    List<List<String>> partitionValuesList = tableMigrationConfig.getPartitionValuesList();
    assertEquals(1, partitionValuesList.size());
  }

  @Test(timeout = 5000)
  public void testParsingInvalidTableMapping() throws IOException {
    List<String> lines = new LinkedList<>();
    lines.add("source_db.source_tbl(\"ptv1\", \"ptv2\"):dest_db");
    List<MmaConfig.TableMigrationConfig> tableMigrationConfigs =
        MmaConfigUtils.parseTableMapping(lines);

    assertEquals(0, tableMigrationConfigs.size());
  }

  @Test(timeout = 5000)
  public void testParsingDuplicatedPartitionSpecTableMapping() throws IOException {
    List<String> lines = new LinkedList<>();
    lines.add("source_db.source_tbl(\"ptv1\", \"ptv2\"):dest_db.dest_tbl");
    lines.add("source_db.source_tbl(\"ptv1\", \"ptv2\"):dest_db.dest_tbl");
    List<MmaConfig.TableMigrationConfig> tableMigrationConfigs =
        MmaConfigUtils.parseTableMapping(lines);

    assertEquals(1, tableMigrationConfigs.size());
    assertEquals(1, tableMigrationConfigs.get(0).getPartitionValuesList().size());
  }

    @Test (timeout = 5000)
    public void testParsingDuplicatedTableMapping() throws IOException {
      List<String> lines = new LinkedList<>();
      lines.add("source_db.source_tbl:dest_db.dest_tbl");
      lines.add("source_db.source_tbl:dest_db.dest_tbl");
      List<MmaConfig.TableMigrationConfig> tableMigrationConfigs =
          MmaConfigUtils.parseTableMapping(lines);

      assertEquals(1, tableMigrationConfigs.size());
    }


  private void checkHiveConfig(MmaConfig.HiveConfig hiveConfig) {
    assertEquals("test_connection_url", hiveConfig.getJdbcConnectionUrl());
    assertEquals("test_user", hiveConfig.getUser());
    assertEquals("test_password", hiveConfig.getPassword());
    assertEquals("test_hms_thrift_addr", hiveConfig.getHmsThriftAddr());
    assertNull(hiveConfig.getKeyTab());
    assertNull(hiveConfig.getKrbPrincipal());
    assertNull(hiveConfig.getKrbSystemProperties());
    assertEquals(7, hiveConfig.getHiveJdbcExtraSettings().size());
  }

  private void checkOdpsConfig(MmaConfig.OdpsConfig odpsConfig) {
    assertEquals("test_project_name", odpsConfig.getProjectName());
    assertEquals("test_access_id", odpsConfig.getAccessId());
    assertEquals("test_access_key", odpsConfig.getAccessKey());
    assertEquals("test_end_point", odpsConfig.getEndpoint());
    assertNull(odpsConfig.getTunnelEndpoint());
  }

  private void checkAdditionalTableConfig(MmaConfig.AdditionalTableConfig additionalTableConfig) {
    assertEquals(1, additionalTableConfig.getRetryTimesLimit());
    assertEquals(1000, additionalTableConfig.getPartitionGroupSize());
  }

  // TODO: add test for MmaMigrationConfig, MmaClientConfig and MmaServerConfig
}
